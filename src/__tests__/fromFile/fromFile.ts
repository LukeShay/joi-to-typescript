import { existsSync, readFileSync, rmdirSync } from 'fs';

import { convertFromDirectory } from '../../index';

const typeOutputDirectory = './src/__tests__/fromFile/interfaces';

describe('Create interfaces from schema files', () => {
  beforeAll(() => {
    if (existsSync(typeOutputDirectory)) {
      rmdirSync(typeOutputDirectory, { recursive: true });
    }
  });

  test('does reading form files work', async () => {
    const result = await convertFromDirectory({
      schemaDirectory: './src/__tests__/fromFile/schemas',
      typeOutputDirectory
    });

    expect(result).toBe(true);
  });
  test('index.ts file contain correct content', () => {
    const indexContent = readFileSync(`${typeOutputDirectory}/index.ts`).toString();

    expect(indexContent).toBe(
      `/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

export * from './FooBar';
export * from './One';
`
    );
  });
  test('One.ts file exists and its content', () => {
    const oneContent = readFileSync(`${typeOutputDirectory}/One.ts`).toString();

    expect(oneContent).toBe(
      `/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

/**
 * a test schema definition
 */
export interface TestSchema {
  'yellow.flower'?: string;
  name?: string;
  propertyName1: boolean;
}
`
    );
  });

  test('FooBar.ts file contain correct content', () => {
    const fooBarContent = readFileSync(`${typeOutputDirectory}/FooBar.ts`).toString();

    expect(fooBarContent).toBe(`/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

export interface Bar {
  /**
   * Id
   * @example 1
   */
  id: number;
}

export interface Foo {
  /**
   * Bar
   */
  bar: Bar;
  /**
   * Id
   * @example 1
   */
  id: number;
}
`);
  });
});

describe('Create interfaces from schema files edge cases', () => {
  beforeEach(() => {
    if (existsSync(typeOutputDirectory)) {
      rmdirSync(typeOutputDirectory, { recursive: true });
    }
  });

  test('input directory that does not exits', async () => {
    await expect(
      convertFromDirectory({
        schemaDirectory: './src/__tests__/doesnotexist',
        typeOutputDirectory
      })
    ).rejects.toThrowError();
  });

  test('create deep output directory that does not exits', async () => {
    const deepDirectory = './src/__tests__/fromFile/interfaces/fake1/fake2';
    const result = await convertFromDirectory({
      schemaDirectory: './src/__tests__/fromFile/schemas',
      typeOutputDirectory: deepDirectory
    });

    expect(result).toBe(true);
    expect(existsSync(deepDirectory)).toBe(true);
  });

  test('debugging on', async () => {
    const consoleSpy = jest.spyOn(console, 'debug');
    const result = await convertFromDirectory({
      schemaDirectory: './src/__tests__/fromFile/schemas',
      typeOutputDirectory,
      debug: true
    });

    expect(result).toBe(true);
    expect(consoleSpy).toHaveBeenCalledWith('FooBarSchema.ts - Processing');
    expect(consoleSpy).toHaveBeenCalledWith('OneSchema.ts - Processing');
    expect(consoleSpy).toHaveBeenCalledWith('notASchema.ts - Skipped - no Joi Schemas found');
  });
});
